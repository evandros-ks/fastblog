{
  
    
        "post0": {
            "title": "SIR Model of Infectious Diseases",
            "content": "Background . Epidemiological models are a type of compartmental model describing disease dynamics on a population. In the case of infectious diseases, we model how the virus/disease interacts with each compartment of the system. Each compartment in this model is represented as a homogeneous system - or an individual within a population where each individual is equivalent. Different epidemiological models consider different compartments with the most common being the SIR model. The compartments in this model are categorized within the population as: . (S)usceptible | (I)nfected | (R)ecovered | . SIR Model . For our case, we&#39;ll be reviewing how to implement a discrete SIR model which describes the dynamics of the SIR compartments in discrete time intervals. This simple model allows only two possible state transitions: $ S rightarrow I $ and $I rightarrow R $. The rate of susceptible individuals becoming infected is described by ${ beta}$, the average number of contacts per individual per unit time and the recovery rate $ gamma$ described the rate for infected individuals to recover. The recovery rate $ gamma$ can also be thought as the inverse of the infectious period for an infected individual or inverse of the recovery period for an infected individual. Each state transition and scaling parameter is shown in the figure below. . Our model will also assume a closed system assuming no immigration, emigration, births, or deaths in the population. Therefore, the population, $N$, remains constant which gives us the following relation ($ ref{pop}$) for all the compartments at any time $t$. . $ N = S(t) + I(t) + R(t) label{pop} tag{1}$ . Given this relation ($ ref{pop}$), we must also consider how individuals switch states from the current time $t$ to the next day $t+1$. The number of recovered individuals ($ ref{rec}$) is simply dependent on the number of infected individuals that recover given the recovery rate $ gamma$. From this relation, we know the number of infected individuals is conditional on the outflow of recovered individuals and inflow of newly infected individuals ($ ref{inf}$). The outflow was previously described ($ ref{rec}$) based on the recovery rate while the inflow is scaled by the force of infection, $ beta I(t)$ representing the number of newly infected individuals from the susceptible population. Finally, the number of susceptible individuals can be described as the remaining individuals that have not been infected or recovered. . $ R(t+1) = R(t) + gamma I(t) label{rec} tag{2}$ $ I(t+1) = I(t) - gamma I(t) + beta I(t) S(t) label{inf} tag{3}$ $ S(t+1) = N - I(t+1) - R(t+1) label{sus} tag{4}$ . Code . import numpy as np import plotly.graph_objects as go import time from ipywidgets import interact, widgets, HTML . def simulate(beta: float = 0.001, infectious_period: int = 21, N: int = 100, days: int = 365): &quot;&quot;&quot;Simulates SIR model for an infectious disease. Args: beta: Transmission rate of disease per day. infectious_period: Number of days disease is transmissible for an infected individual. N: Size of population. days: Number of days to simulate disease spread not including t=0 (t=0 is when first patient is infected). Returns: S: Numpy array containing number of susceptible individuals for each discrete time point. I: Numpy array containing number of infected individuals for each discrete time point. R: Numpy array containing number of recovered individuals for each discrete time point. &quot;&quot;&quot; gamma = 1/infectious_period # Number of days to simulate (starting at t=0) days = days + 1 # Initial number of infected and recovered (t=0) I, R = np.zeros(days), np.zeros(days) I[0], R[0] = 1, 0 # Initial number of susceptible S = np.zeros(days) S[0] = N - I[0] - R[0] for t in range(days-1): R[t+1] = min(R[t] + gamma * I[t], N) I[t+1] = min(I[t] - gamma * I[t] + beta * I[t] * S[t], N) S[t+1] = max(N - I[t+1] - R[t+1], 0) return S, I, R, N def plot(S, I, R, N): fig = go.FigureWidget() fig.add_trace(go.Scatter(y=S/N, mode=&#39;lines&#39;, name=&#39;Susceptible&#39;)) fig.add_trace(go.Scatter(y=I/N, mode=&#39;lines&#39;, name=&#39;Infected&#39;)) fig.add_trace(go.Scatter(y=R/N, mode=&#39;lines&#39;, name=&#39;Recoverd&#39;)) fig.update_layout(title=&quot;SIR Model&quot;, title_x = 0.5, xaxis_title=&quot;Number of Days&quot;, yaxis_title=&quot;Percentage of Population (N)&quot;, ) return fig S, I, R, N = simulate() fig = plot(S, I, R, N) def update_params(**kwargs): S, I, R, N = simulate(**kwargs) print(kwargs) fig.data[0].y = S/N fig.data[1].y = I/N fig.data[2].y = R/N time.sleep(1/2) fig.show() interact(update_params, beta = widgets.FloatSlider(value=0.001, min=1/1_000, max=1/10, step=0.0001, readout_format=&#39;.4f&#39;), infectious_period = widgets.FloatSlider(value=21, min=1, max=100, step=1), N = widgets.IntSlider(value=100, min=0, max=10_000, step=1), days = widgets.IntSlider(value=365, min=0, max=365*2, step=1)) . &lt;function __main__.update_params(**kwargs)&gt; . Note: To view an interactive SIR plot and how each parameter ($ beta$, $ gamma$, $N$, and number of days $T$) affect the compartment dynamics click the Google Colab link at the top of the page. . Reference . Krickeberg, K., &amp; Pham, T. M. H. (2011). Epidemiology: Key to prevention. Springer Science &amp; Business Media. .",
            "url": "https://evandros-ks.github.io/fastblog/2021/12/21/SIR_Model.html",
            "relUrl": "/2021/12/21/SIR_Model.html",
            "date": " • Dec 21, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://evandros-ks.github.io/fastblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://evandros-ks.github.io/fastblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}